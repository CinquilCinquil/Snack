types:
    MyTree ofForm Leaf(), Branch(int, MyTree, MyTree);
decls:
    raiz : MyTree;

    fun insert(raiz ? MyTree, val : int) : unit {
        match raiz with {
            form Leaf():
                raiz := Branch(val, Leaf, Leaf);
            form Branch(x, left, right):
                if(val < x) {
                    insert(left, val);
                } else {
                    insert(right, val);
                }
                raiz := Branch(x, left, right);
        }
    }

    fun minimum(raiz ? MyTree, level : int) : unit {
        match raiz with {
            form Leaf():
                return !;
            form Branch(x, left, y):
                match left with {
                    form Leaf():
                        spit "Minimo";
                        spit x;
                        spit level;
                        return !;
                    form Branch(z, w, a):
                        return minimum(left, level + 1);
                }
        }
    }

    fun maximum(raiz ? MyTree, level : int) : unit {
        match raiz with {
            form Leaf():
                return !;
            form Branch(x, y, right):
                match right with {
                    form Leaf():
                        spit "Maximo";
                        spit x;
                        spit level;
                        return !;
                    form Branch(z, w, a):
                        return maximum(right, level + 1);
                }
        }
    }

    fun print_levels(raiz ? MyTree) : unit {
        index : int := 0;
        queue : list[MyTree];

        queue.push(raiz);

        while(index < size(queue)) {
            t : MyTree = queue[index];

            match t with {
                form Leaf():
                    --nothing
                form Branch(x, left, right):
                    spit x;
                    queue.push(left);
                    queue.push(right);
            }

            index := index + 1;
        }
    }

    n : int;
    x : int;
main:
    raiz := Leaf;

    spit "Digite a quantidade de valores:";
    eat n;

    for i : int in [1 .. n] step 1 {
        eat x;
        insert(raiz, x);
    }

    spit "Raiz: ";
    spit raiz;

    minimum(raiz, 0);
    maximum(raiz, 0);
